import MomentUtils from "@date-io/moment"
import { Box, Button, Card, CardActions, CardContent, Checkbox, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, Paper, Switch, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from "@material-ui/core"
import { KeyboardDatePicker, MuiPickersUtilsProvider } from "@material-ui/pickers"
import moment from 'moment'
import Head from "next/head"
import { useState } from "react"
import Layout from "../../components/layout"
import { deleteRequest, getRequest, postRequest } from "../../lib/apiClient"
import { formatDate } from "../../lib/datetime"

export async function getServerSideProps({ params }) {

    const [data, error] = await getRequest(`/admin/clientSubscriptions/${params.id}`)
    const [invoices, invoicesError] = await getRequest(`/admin/clientSubscriptions/${params.id}/invoices`)
    const [client, clientError] = await getRequest(`/admin/clients/${data.clientId}`)


    console.log({ client })

    if (error) {
        return {
            props: {
                notFound: true
            }
        }
    }

    return {
        props: {
            subscription: data,
            invoices: invoices.results,
            client: client
        }
    }
}


export default function ClientSubscriptions({ subscription, invoices, client }) {

    const [clientSubscription, setClientSubscription] = useState(subscription)
    const [clientInvoices, setClientInvoices] = useState(invoices)
    const [renewalDate, setRenewalDate] = useState(null)
    const status = clientSubscription?.status
    const featuresList = [
        "timeCard",
        "orderDisplay",
        "salesReport",
        "customerStats",
        "timeCardReport",
        "membership",
        "calendar",
        "staff",
        "roster",
        "reservation",
        "einvoice"
    ]

    const restrictedFeatures = clientSubscription.clientSubscriptionAccess.restrictedFeatures
    const enabledFeatures = featuresList.filter(v => {
        return !restrictedFeatures.includes(v)
    })

    const [checked, setChecked] = useState(enabledFeatures);

    async function toggleFeature(id, value) {

        const currentIndex = checked.indexOf(value)
        const newChecked = [...checked]

        if (currentIndex === -1) {
            newChecked.push(value)
        } else {
            newChecked.splice(currentIndex, 1)
        }

        console.log('selected features', newChecked)

        setChecked(newChecked)

        const [data, error] = await postRequest(`/admin/clientSubscriptions/${id}/features`, {
            feature: value,
            enabled: currentIndex === -1
        })        
    }

    async function activateSubscription(id) {

        const [data, error] = await postRequest(`/admin/clientSubscriptions/${id}/reactivate`)
        const [updated, updatedError] = await getRequest(`/admin/clientSubscriptions/${id}`)

        setClientSubscription(updated)
    }

    async function deactivateSubscription(id) {

        const [data, error] = await postRequest(`/admin/clientSubscriptions/${id}/deactivate`)
        const [updated, updatedError] = await getRequest(`/admin/clientSubscriptions/${id}`)

        setClientSubscription(updated)
    }

    function handleRenewalDateChange(date, value) {
        console.log('selected renewal date', value)

        setRenewalDate(date)
    }

    async function renewSubscription(id) {

        console.log('renew date', renewalDate)

        const formattedRenewalDate = renewalDate !== null ? moment(renewalDate).format('YYYY-MM-DD') : null

        console.log('formatted date', formattedRenewalDate)

        const [data, error] = await postRequest(`/admin/clientSubscriptions/${id}/renew`, { renewalDate: formattedRenewalDate })
        const [invoices, invoicesError] = await getRequest(`/admin/clientSubscriptions/${id}/invoices`)

        setClientInvoices(invoices.results)
    }

    async function deleteInvoice(subId, invoiceIdentifier) {

        const [data, error] = await deleteRequest(`/admin/invoices/${invoiceId}/activate`)

        const [invoices, invoicesError] = await getRequest(`/admin/clientSubscriptions/${subId}/invoices`)

        setClientInvoices(invoices.results)
    }

    async function deleteInvoice(subId, invoiceId) {

        const [data, error] = await deleteRequest(`/admin/invoices/${invoiceId}`)

        const [invoices, invoicesError] = await getRequest(`/admin/clientSubscriptions/${subId}/invoices`)

        setClientInvoices(invoices.results)
    }

    return (
        <Layout>
            <Head>
                <title>Rain Admin - Client Subscription</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Box>
                <Card>
                    <CardContent>
                        <Typography variant="h2" gutterBottom>
                            {client.clientName}
                        </Typography>
                        <Typography variant="h4" color="textSecondary">
                            {clientSubscription.planName} {clientSubscription.planPeriod} ({status})
                        </Typography>
                        <Typography variant="body1">
                            Plan Duration - {formatDate(clientSubscription.planStartDate)} - {formatDate(clientSubscription.planEndDate)}
                        </Typography>
                        <Typography variant="body1">
                            Plan Details
                        </Typography>
                        <Typography variant="body1">
                            Enabled Features
                        </Typography>
                        <List dense>
                            {featuresList.map((value) => {
                                const labelId = `feature-id-${value}`;

                                return (
                                    <ListItem key={value} role={undefined} dense button>                                
                                        <ListItemText id={labelId} primary={`${value}`} />
                                        <ListItemSecondaryAction>
                                            <Switch
                                                edge="end"
                                                onChange={() => toggleFeature(clientSubscription.id, value)}
                                                checked={checked.indexOf(value) !== -1}
                                                inputProps={{ 'aria-labelledby': `switch-list-label-${value}` }}
                                            />
                                        </ListItemSecondaryAction>
                                    </ListItem>
                                );
                            })}
                        </List>
                    </CardContent>
                    <CardActions>

                        <Button variant="contained" color="primary" disabled={status === 'ACTIVE'}
                            onClick={() => activateSubscription(clientSubscription.id)}>
                            Activate
                        </Button>

                        <Button variant="contained" color="primary" disabled={status === 'INACTIVE'}
                            onClick={() => deactivateSubscription(clientSubscription.id)}>
                            Deactivate
                        </Button>

                        <MuiPickersUtilsProvider utils={MomentUtils}>
                            <KeyboardDatePicker
                                margin="normal"
                                id="renewalDate"
                                label="Choose a renewal date"
                                format="MM/DD/yyyy"
                                value={renewalDate}
                                onChange={handleRenewalDateChange}
                                minDate={new Date()}
                                KeyboardButtonProps={{
                                    'aria-label': 'change date',
                                }}
                            />
                        </MuiPickersUtilsProvider>
                        <Button variant="contained" color="secondary"
                            onClick={() => renewSubscription(clientSubscription.id)}>
                            Renew
                        </Button>

                    </CardActions>
                </Card>

                <TableContainer component={Paper}>
                    <Table aria-label="clients">
                        <TableHead>
                            <TableRow>
                                <TableCell>Invoice ID</TableCell>
                                <TableCell>Due Amount</TableCell>
                                <TableCell>Status</TableCell>
                                <TableCell>Invoice Period</TableCell>
                                <TableCell></TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {clientInvoices?.map((row) => (
                                <TableRow key={row.id}>
                                    <TableCell>{row.invoiceIdentifier} {row.currentInvoice ? '(current)' : ''}</TableCell>
                                    <TableCell>{row.dueAmount}</TableCell>
                                    <TableCell>{row.status}</TableCell>
                                    <TableCell>{formatDate(row.validFrom)} - {formatDate(row.validTo)}</TableCell>
                                    <TableCell>
                                        <Box>
                                            <Button variant="contained" color="primary" disabled={row.status === 'PAID'}
                                                onClick={() => sendInvoice(row.id)}>
                                                Send
                                            </Button>
                                            <Button variant="contained" color="primary" disabled={row.status === 'PAID'}
                                                onClick={() => activateInvoice(clientSubscription.id, row.invoiceIdentifier)}>
                                                Activate
                                            </Button>
                                            <Button variant="contained" color="secondary" disabled={row.status === 'PAID'}
                                                onClick={() => deleteInvoice(clientSubscription.id, row.id)}>
                                                Delete
                                            </Button>
                                        </Box>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>
        </Layout>
    )
}
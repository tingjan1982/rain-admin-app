import { Box, Button, Collapse, Fab, IconButton, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from "@material-ui/core"
import KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown'
import KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp'
import AddIcon from '@material-ui/icons/Add'
import RefreshIcon from '@material-ui/icons/Refresh'
import DoneIcon from '@material-ui/icons/Done'
import Head from "next/head"
import Link from "next/link"
import { useState } from "react"
import Layout from "../../components/layout"
import { getRequest } from "../../lib/apiClient"
import { formatDate } from "../../lib/datetime"
import { makeStyles } from "@material-ui/styles"
import { withPageAuthRequired } from '@auth0/nextjs-auth0';


export async function getServerSideProps() {

    const [data, error] = await getRequest('/admin/clientSubscriptions')

    if (error) {
        return {
            props: {
                notFound: true
            }
        }
    }

    return {
        props: {
            subscriptions: data.results
        }
    }
}


export default withPageAuthRequired(function ClientSubscriptions({ subscriptions }) {

    const styles = makeStyles((theme) => ({
        fab: {
            position: 'fixed',
            bottom: theme.spacing(2),
            right: theme.spacing(2),
        },
    }))

    const classes = styles()

    return (
        <Layout>
            <Head>
                <title>Rain Admin - Client Subscriptions</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Box>
                <Box m={2}>
                    <Button variant="contained" color="primary">
                        New
                    </Button>
                </Box>
                <TableContainer component={Paper}>
                    <Table aria-label="clients">
                        <TableHead>
                            <TableRow>
                                <TableCell>Name (sub id)</TableCell>
                                <TableCell align="right">Username</TableCell>
                                <TableCell align="right">Status</TableCell>
                                <TableCell align="right">Plan Name</TableCell>
                                <TableCell align="right">Plan Price (Discount)</TableCell>
                                <TableCell align="right">Plan Period</TableCell>
                                <TableCell align="right">Start/End Date</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {subscriptions?.map((row) => (
                                <SubscriptionRow key={row.id} row={row} />
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
                <Fab variant="extended" color="primary" aria-label="add" className={classes.fab}>
                    <DoneIcon /> Activate
                </Fab>
                <Fab variant="extended" color="primary" aria-label="add" className={classes.fab}>
                    <DoneIcon /> Activate
                </Fab>

            </Box>
        </Layout>
    )
})

function SubscriptionRow(props) {

    const { row } = props
    const [open, setOpen] = useState(false)
    const [invoices, setInvoices] = useState([])


    async function loadInvoiceData() {

        console.log("Loading subscription invoice data")
        const [data, error] = await getRequest(`/admin/clientSubscriptions/${row.id}/invoices`)

        if (data.results) {
            setInvoices(data.results)
        }
    }

    async function loadAndOpen(open) {

        if (invoices.length == 0) {
            await loadInvoiceData()
        }

        setOpen(open)
    }

    return (
        <>
            <TableRow key={row.id}>
                <TableCell>
                    <IconButton aria-label="expand row" size="small" onClick={() => loadAndOpen(!open)}>
                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
                    </IconButton>

                    <Link key={row.id} href={`/clientSubscriptions/${row.id}`}>
                        <a>{row.clientName} ({row.id})</a>
                    </Link>
                </TableCell>
                <TableCell align="right">
                    {row.clientUsername}
                </TableCell>
                <TableCell align="right">{row.status}</TableCell>
                <TableCell align="right">{row.planName}</TableCell>
                <TableCell align="right">{row.planPrice} ({row.discountAmount})</TableCell>
                <TableCell align="right">{row.planPeriod}</TableCell>
                <TableCell align="right">{formatDate(row.planStartDate)} ~ {formatDate(row.planEndDate)}</TableCell>
            </TableRow>
            <TableRow>
                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={7}>
                    <Collapse in={open} timeout="auto" unmountOnExit>
                        <Box margin={1}>
                            <Typography variant="h6" component="div">
                                Invoices
                                <IconButton onClick={loadInvoiceData}>
                                    <RefreshIcon />
                                </IconButton>
                            </Typography>
                            <Table size="small" aria-label="invoices">
                                <TableHead>
                                    <TableRow>
                                        <TableCell>Invoice ID</TableCell>
                                        <TableCell>Due Amount</TableCell>
                                        <TableCell>Status</TableCell>
                                        <TableCell>Invoice Period</TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {invoices?.map((inv) => (
                                        <TableRow key={inv.id}>
                                            <TableCell component="th" scope="row">
                                                {inv.invoiceIdentifier}
                                            </TableCell>
                                            <TableCell>{inv.dueAmount}</TableCell>
                                            <TableCell>{inv.status}</TableCell>
                                            <TableCell>{formatDate(inv.validFrom)} ~ {formatDate(inv.validTo)}</TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </Box>
                    </Collapse>
                </TableCell>
            </TableRow>
        </>
    )

}
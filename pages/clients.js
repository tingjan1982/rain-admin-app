import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Paper, Snackbar, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from "@material-ui/core";
import EditIcon from '@material-ui/icons/Edit';
import { Alert } from "@material-ui/lab";
import Head from 'next/head';
import { useEffect, useState } from "react";
import Layout from '../components/layout';
import { getRequest, patchRequest } from "../lib/apiClient";
import { withPageAuthRequired } from '@auth0/nextjs-auth0';

export async function getServerSideProps() {

    const [data, error] = await getRequest('/admin/clients')

    if (error) {
        return {
            props: {
                notFound: true
            }
        }
    }

    return {
        props: {
            clients: data.results
        }
    }
}

export default withPageAuthRequired(function Client({ clients }) {

    const [toggleDialog, setToggleDialog] = useState(false)
    const [toggleCNDialog, setToggleCNDialog] = useState(false)
    const [toggleSnackbar, setToggleSnackbar] = useState(false)
    const [message, setMessage] = useState({})
    const [editClient, setEditClient] = useState(null)

    function openDialog(client, toggleDialogFunc) {
        setEditClient(client)
        toggleDialogFunc(true)
    }

    function closeDialog(toggleDialogFunc) {
        toggleDialogFunc(false)

    }

    function openSnackbar(message, type) {
        setMessage({ message: message, type: type })
        setToggleSnackbar(true)
    }

    function closeSnackbar(event, reason) {
        setToggleSnackbar(false)
    }

    async function handleUpdateUsername(newUsername, password) {
        closeDialog(setToggleDialog)
        console.log('Updating client account username', newUsername)

        const request = {
            newUsername: newUsername,
            password: password
        }

        const [data, error] = await patchRequest(`/admin/clients/${editClient.id}/username`, request)

        handleAlert(data, error)
    }

    async function handleUpdateClientName(clientName) {
        closeDialog(setToggleCNDialog)
        console.log('Updating client name', clientName)

        const request = {
            clientName: clientName
        }

        const [data, error] = await patchRequest(`/admin/clients/${editClient.id}/clientName`, request)

        handleAlert(data, error)
        
    }

    function handleAlert(data, error) {

        const [message, type] = error ? ['Error', 'error'] : ['Data is saved', 'success']

        openSnackbar(message, type)
    }

    return (
        <Layout>
            <Head>
                <title>Rain Admin - Client List</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Box>
                <Snackbar open={toggleSnackbar} anchorOrigin={{ vertical: 'top', horizontal: 'center' }} autoHideDuration={4500} onClose={closeSnackbar}>
                    <>
                        <Alert onClose={closeSnackbar} severity={message.type}>
                            {message.message}
                        </Alert>
                    </>
                </Snackbar>
                <EditUsernameDialog
                    editClient={editClient}
                    toggleDialog={toggleDialog}
                    closeDialog={() => closeDialog(setToggleDialog)}
                    handleSubmit={handleUpdateUsername}
                />
                <EditClientNameDialog
                    editClient={editClient}
                    toggleDialog={toggleCNDialog}
                    closeDialog={() => closeDialog(setToggleCNDialog)}
                    handleSubmit={handleUpdateClientName}
                />
                <TableContainer component={Paper}>
                    <Table aria-label="clients">
                        <TableHead>
                            <TableRow>
                                <TableCell>Name (id)</TableCell>
                                <TableCell align="right">Username</TableCell>
                                <TableCell align="right">Status</TableCell>
                                <TableCell align="right">Last Order Date</TableCell>
                                <TableCell align="right">Total Order Count</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {clients.map((row) => (
                                <TableRow key={row.id}>
                                    <TableCell component="th" scope="row">
                                        {row.clientName} ({row.id})
                                        <IconButton onClick={() => openDialog(row, setToggleCNDialog)} color="inherit">
                                            <EditIcon />
                                        </IconButton>
                                    </TableCell>
                                    <TableCell align="right">
                                        {row.username}
                                        <IconButton onClick={() => openDialog(row, setToggleDialog)} color="inherit">
                                            <EditIcon />
                                        </IconButton>
                                    </TableCell>
                                    <TableCell align="right">{row.status}</TableCell>
                                    <TableCell align="right">{row.lastOrderDate}</TableCell>
                                    <TableCell align="right">{row.orderCount}</TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>
        </Layout >
    )

})

function EditUsernameDialog(props) {

    const { editClient, toggleDialog, closeDialog, handleSubmit } = props
    const [newUsername, setNewUsername] = useState('')
    const [password, setPassword] = useState('')

    useEffect(() => {        
        setNewUsername(editClient?.username)

    }, [editClient])

    return (
        <Dialog open={toggleDialog} onClose={() => console.log('Closed')} aria-labelledby="form-dialog-title">
            <DialogTitle id="form-dialog-title">Update Client Account Username</DialogTitle>
            <DialogContent>
                <DialogContentText>
                    Enter a valid email as your username.
                </DialogContentText>
                <TextField
                    margin="dense"
                    id={newUsername}
                    label="Username (Email)"
                    type="email"
                    value={newUsername}
                    fullWidth
                    onChange={(e) => setNewUsername(e.target.value)}
                />
                <TextField
                    margin="dense"
                    id="password"
                    label="Enter password for authentication"
                    type="password"
                    value={password}
                    fullWidth
                    onChange={(e) => setPassword(e.target.value)}
                />
            </DialogContent>
            <DialogActions>
                <Button onClick={closeDialog} color="primary">
                    Cancel
                </Button>
                <Button onClick={() => handleSubmit(newUsername, password)} color="primary">
                    Confirm
                </Button>
            </DialogActions>
        </Dialog>
    )
}


function EditClientNameDialog(props) {

    const { editClient, toggleDialog, closeDialog, handleSubmit } = props
    const [clientName, setClientName] = useState('')

    useEffect(() => {
        setClientName(editClient?.clientName)

    }, [editClient])

    return (
        <Dialog open={toggleDialog} onClose={() => console.log('closed')} aria-labelledby="form-dialog-title">
            <DialogTitle id="form-dialog-title">Update Client Name</DialogTitle>
            <DialogContent>
                <DialogContentText>
                    Enter a new client name
                </DialogContentText>
                <TextField
                    margin="dense"
                    id="clientName"
                    label="Client Name"
                    type="text"
                    value={clientName}
                    fullWidth
                    onChange={(e) => setClientName(e.target.value)}
                />
            </DialogContent>
            <DialogActions>
                <Button onClick={closeDialog} color="primary">
                    Cancel
                </Button>
                <Button onClick={() => handleSubmit(clientName)} color="primary">
                    Confirm
                </Button>
            </DialogActions>
        </Dialog>
    )
}